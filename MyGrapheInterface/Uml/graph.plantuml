@startuml graph
skinparam actorStyle awesome

package "Graph" #DDDDDD 
{
class Vertex {
    -int idVertex
    -String info
    -Color colorVertex
}
note left of Vertex::idVertex
  This Vetex id is unique
end note

abstract class Edge {
    -int idEdge
    -Color colorEdge
    -Vertex[] ends
    -double value
    -{static} nb_edges
}
note left of Edge::idEdge
  This Edge id is unique
end note


note left of Edge::nb_edges
  To give to each edge a unique identifier
end note

Edge "*" o-- "2 ends" Vertex 
class UndirectedEdge extends Edge {
    +Vertex[] getEnds() 
}

class DirectEdge extends Edge {
    -int source
    +Vertex getSource()
    +Vertex getSink()
}

note left of DirectEdge::source
  0 or 1
end note

interface Graph {
    +int nbOfVertices()
    +int nbOfEdges()
    +void addVertex(in Vertex vertex)
    +void addEdge(in Vertex ver1, Vertex ver2, EdgeKind)
    +boolean isConnected(in Vertex, in Vertex)
    +boolean isConnected()
    +Edge[] getEdges(in Vertex, in Vertex)
    +Edge[] getEdges()
    +Vertex[] getVertices()
    +Edge[] getNeighbourEdges(in Vertex) 
}

Graph "many"..>"1" Edge : contains 
Graph "many"..>"1" Vertex : contains
note left of Graph::addEdge
   EdgeKind: ‘directed’ or ‘undirected’
end note
}

package "TestMyGraphe" #DDDDDD {
  class MyTest
  {
  }
  MyTest ..> DirectEdge
  MyTest ..> UndirectedEdge
  MyTest ..> Vertex 
}

@enduml